<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>这是一篇新文章</title>
    <url>/2023/09/09/test/</url>
    <content><![CDATA[<p>新文章测试。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>数据结构</tag>
        <tag>英格培训</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/08/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2023/09/12/%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ul>
<li><strong>数据对象</strong>是具有相同<u>性质</u>的数据元素的集合，是数据的一个子集。</li>
<li><strong>数据结构</strong>是相互之间存在一种或多种特定<u>关系</u>的数据元素的集合。</li>
<li>同样的数据元素可组成不同的数据结构，不同的数据元素可组成相同的数据结构。</li>
</ul>
<h2 id="数据结构的三要素"><a href="#数据结构的三要素" class="headerlink" title="数据结构的三要素"></a>数据结构的三要素</h2><ul>
<li><p><strong>逻辑结构</strong>：</p>
<p>集合结构：（各个元素同属一个集合，别无其它关系。）</p>
<p>线性结构：一对一（除了第一个元素，所有元素都有唯一前驱；除了最后一个元素，所有元素都有唯一后继。）</p>
<p>树形结构：一对多</p>
<p>图状结构：多对多</p>
</li>
<li><p><strong>数据的运算</strong>：针对于某种逻辑结构，结合实际需求，定义基本运算。</p>
</li>
<li><p><strong>物理结构（存储结构）</strong>： </p>
<p>顺序存储（逻辑上相邻的元素存储在物理位置上也相邻的存储单元中。）</p>
<p>链式存储（逻辑上相邻的元素在物理位置上可以不相邻。）</p>
<p>索引存储（在存储元素信息的同时，还建立附加的<u>索引表</u>。索引表中的每项称为索引项，索引项的一般形 式是（关键字，地址）。）</p>
<p>散列存储（根据元素的关键字直接计算出该元素的存储地址，又称<u>哈希存储</u>。）</p>
<p>注：除了顺序存储其他的都是非顺序存储（离散存储）。</p>
<p>​		数据的存储结构会影响存储空间分配的方便程度。</p>
<p>​		数据的存储结构会影响对数据运算的速度。</p>
<p>​		运算的定义是针对逻辑结构的，运算的实现是针对存储结构的。</p>
</li>
</ul>
<h2 id="数据类型、抽象数据类型"><a href="#数据类型、抽象数据类型" class="headerlink" title="数据类型、抽象数据类型"></a>数据类型、抽象数据类型</h2><ul>
<li><p><strong>数据类型</strong>是一个值的集合和定义在此集合上的一组操作的总称。</p>
<p>原子类型：其值不可再分的数据类型。</p>
<p>结构类型：其值可以再分解为若干成分的数据类型。</p>
</li>
<li><p><strong>抽象数据类型（ADT）</strong>是抽象数据组织及与之相关的操作。</p>
</li>
</ul>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul>
<li><p><strong>算法</strong>是对特定问题求解步骤的一种描述，它是指令的有限序列，其中的每条指令表示一个或多个操作。</p>
</li>
<li><p><strong>算法的五个特性</strong></p>
<p>有穷性：一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成。（注：算法必须是有穷的，而程序可以是无穷的。）</p>
<p>确定性：算法中每条指令必须有确切的含义，对于相同的输入只能得出相同的输出。</p>
<p>可行性：算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现。</p>
<p>输入：一个算法有零个或多个输入。</p>
<p>输出：一个算法有一个或多个输出。</p>
</li>
<li><p><strong>“好”算法</strong>的特性：正确性、可读性、健壮性、高效率与低存储量需求。</p>
</li>
<li><p><strong>时间复杂度</strong>:衡量时间开销与问题规模n之间的关系。（以最深层的for循环为主）</p>
<p><strong>O(1)&lt;O(㏒₂n)&lt;O(n)&lt;O(n㏒₂n)&lt;O(n²)&lt;O(n³)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)</strong></p>
<p>加法规则：T(n)&#x3D;O(f(n))+O(g(n))&#x3D;O(max(f(n),g(n)))</p>
<p>乘法规则：T(n)&#x3D;O(f(n))×O(g(n))&#x3D;O(f(n)×g(n))</p>
</li>
<li><p><strong>空间复杂度</strong>：空间开销（内存开销）与问题规模n之间的关系。（以最高维的数组为主或者等于递归调用的深度）</p>
<p>算法<strong>原地工作</strong>——算法所需内存空间为常量</p>
<p>（用法同上。）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
